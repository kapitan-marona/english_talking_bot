from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

voice_mode_button = ReplyKeyboardMarkup(
    [[KeyboardButton("üó£Ô∏è Voice mode")]],
    resize_keyboard=True
)
text_mode_button = ReplyKeyboardMarkup(
    [[KeyboardButton("‚å®Ô∏è Text mode")]],
    resize_keyboard=True
)

from telegram.ext import ConversationHandler, ContextTypes
from config import client

LANG, LEVEL, STYLE = range(3)

lang_keyboard = [["–†—É—Å—Å–∫–∏–π", "ÿπÿ±ÿ®Ÿä"]]
level_keyboard = [["A1-A2", "B1-B2"]]
style_keyboard_ru = [["–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "–î–µ–ª–æ–≤–æ–π"]]
style_keyboard_ar = [["ÿπÿßŸÖŸä", "ÿ±ÿ≥ŸÖŸä"]]

lang_markup = ReplyKeyboardMarkup(lang_keyboard, one_time_keyboard=True, resize_keyboard=True)
level_markup = ReplyKeyboardMarkup(level_keyboard, one_time_keyboard=True, resize_keyboard=True)

def generate_system_prompt(language, level, style):
    base = "You are an English language assistant helping a user practice English."
    native_lang = "Russian" if language == "–†—É—Å—Å–∫–∏–π" else "Arabic"

    tone_instruction = ""
    grammar_instruction = ""
    correction_instruction = ""

    if style.lower() in ["—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "ÿπÿßŸÖŸä"]:
        tone_instruction = (
            "Your tone is relaxed, friendly, like an old friend. "
            "Use slang, emojis, and contractions where appropriate. "
            "At level A1-A2, keep slang minimal and explain it in the user's native language."
        )
        correction_instruction = (
            "If the user makes mistakes in English, gently correct them in a friendly way, "
            "explaining corrections clearly."
        )
    elif style.lower() in ["–¥–µ–ª–æ–≤–æ–π", "ÿ±ÿ≥ŸÖŸä"]:
        tone_instruction = (
            "Your tone is formal, polite, and professional. "
            "Avoid slang and contractions."
        )
        correction_instruction = (
            "If the user makes mistakes in English, correct them formally and politely."
        )

    if level == "A1-A2":
        grammar_instruction = (
            "Use short, simple sentences. Avoid complex grammar. "
            "Keep responses easy to understand for a beginner."
        )
    elif level == "B1-B2":
        grammar_instruction = (
            "You may use more advanced grammar, longer sentences, and richer vocabulary. "
            "Adjust your tone accordingly."
        )

    return (
        f"{base} The user's native language is {native_lang}. "
        f"{tone_instruction} {grammar_instruction} {correction_instruction} "
        "Always respond in English unless you need to explain something in the user's native language. "
        "Ask follow-up questions to keep the conversation going."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()  # –æ—á–∏—â–∞–µ–º –≤—Å—ë
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ /ÿßÿÆÿ™ÿ± ŸÑÿ∫ÿ© ÿßŸÑŸàÿßÿ¨Ÿáÿ©:",
        reply_markup=lang_markup
    )
    return LANG


async def lang_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = update.message.text
    context.user_data["language"] = lang

    context.user_data["style_markup"] = ReplyKeyboardMarkup(
        style_keyboard_ru if lang == "–†—É—Å—Å–∫–∏–π" else style_keyboard_ar,
        one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞:" if lang == "–†—É—Å—Å–∫–∏–π" else "ÿßÿÆÿ™ÿ± ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÑÿ∫ÿ©:",
        reply_markup=level_markup
    )
    return LEVEL

async def level_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["level"] = update.message.text

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:" if context.user_data["language"] == "–†—É—Å—Å–∫–∏–π" else "ÿßÿÆÿ™ÿ± ÿ£ÿ≥ŸÑŸàÿ® ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©:",
        reply_markup=context.user_data["style_markup"]
    )
    return STYLE

async def style_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    style = update.message.text
    context.user_data["style"] = style

    language = context.user_data["language"]

    welcome_msg = (
        "–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –±–æ–ª—Ç–∞—Ç—å, –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ –¥—Ä—É–∑—å—è! üòé –û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?"
        if language == "–†—É—Å—Å–∫–∏–π" and style.lower() == "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π" else
        "–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ. –° –∫–∞–∫–æ–π —Ç–µ–º—ã –Ω–∞—á–Ω—ë–º –±–µ—Å–µ–¥—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?"
        if language == "–†—É—Å—Å–∫–∏–π" else
        "ÿ™ŸÖÿßŸÖ! ŸáŸÜÿ™ŸÉŸÑŸÖ ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿπÿßŸÖŸä ŸàŸÖÿ±Ÿêÿ≠. üòé ÿ™ÿ≠ÿ® ŸÜÿ™ŸÉŸÑŸÖ ÿπŸÜ ÿßŸäŸá ÿ®ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿü"
        if style.lower() == "ÿπÿßŸÖŸä" else
        "ÿ≠ÿ≥ŸÜÿßŸãÿå ÿ≥ŸÜÿ™ÿ≠ÿØÿ´ ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿ±ÿ≥ŸÖŸä. ŸÖÿß ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑÿ∞Ÿä ÿ™ŸàÿØ ÿßŸÑÿ®ÿØÿ° ÿ®Ÿá ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©ÿü"
    )

    context.user_data["voice_mode"] = False  # —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—Å—Ç
await update.message.reply_text(
    welcome_msg + "\n\nChoose a mode üëá / ÿßÿÆÿ™ÿ± Ÿàÿ∂ÿπ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©:",
    reply_markup=voice_mode_button
)

    system_prompt = generate_system_prompt(language, context.user_data["level"], style)
    context.user_data["system_prompt"] = system_prompt

    return ConversationHandler.END

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    if user_text == "üó£Ô∏è Voice mode":
        context.user_data["voice_mode"] = True
        await update.message.reply_text("Voice mode enabled. I will respond with voice.", reply_markup=text_mode_button)
        return
    elif user_text == "‚å®Ô∏è Text mode":
        context.user_data["voice_mode"] = False
        await update.message.reply_text("Text mode enabled. I will respond with text.", reply_markup=voice_mode_button)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ system_prompt
    if "system_prompt" not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã / Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ®ÿØÿ° ÿ®ÿßŸÑÿ£ŸÖÿ± /start.")
        return

    # –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    system_prompt = context.user_data["system_prompt"]
    chat_history = context.user_data.setdefault("chat_history", [])
    chat_history.append({"role": "user", "content": user_text})
    context.user_data["chat_history"] = chat_history[-40:]

    messages = [{"role": "system", "content": system_prompt}] + context.user_data["chat_history"]

    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            temperature=0.7
        )
        answer = completion.choices[0].message.content
        context.user_data["chat_history"].append({"role": "assistant", "content": answer})

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
        if context.user_data.get("voice_mode"):
            try:
                await speak_and_reply(answer, update)
            except Exception:
                await update.message.reply_text(answer)
        else:
            await update.message.reply_text(answer, reply_markup=voice_mode_button)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")



async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


import tempfile
import subprocess
from telegram import Update
from telegram.ext import ContextTypes
from config import client
from gtts import gTTS
import tempfile

async def speak_and_reply(text: str, update: Update):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        tts = gTTS(text=text, lang="en")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmpfile:
            tts.save(tmpfile.name)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(tmpfile.name, "rb") as voice_file:
                await update.message.reply_voice(voice=voice_file)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")


async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice

    with tempfile.TemporaryDirectory() as tmpdir:
        ogg_path = f"{tmpdir}/voice.ogg"
        mp3_path = f"{tmpdir}/voice.mp3"

        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(ogg_path)

        subprocess.run(["ffmpeg", "-i", ogg_path, mp3_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        try:
            with open(mp3_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    response_format="text"
                )

            # –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            class FakeMessage:
                def __init__(self, text, original):
                    self.text = text
                    self.chat_id = original.chat_id
                    self.chat = original.chat
                    self.from_user = original.from_user
                    self.message_id = original.message_id
                    self._original = original

                async def reply_text(self, *args, **kwargs):
                    return await self._original.reply_text(*args, **kwargs)

                async def reply_voice(self, *args, **kwargs):
                    return await self._original.reply_voice(*args, **kwargs)

            # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ update
            fake_message = FakeMessage(transcript, update.message)
            fake_update = Update(update.update_id, message=fake_message)

            await chat(fake_update, context)

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")


