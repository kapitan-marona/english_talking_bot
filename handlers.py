from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ConversationHandler, ContextTypes
from google.cloud import texttospeech
import tempfile
import os
import base64
import subprocess

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
LANG, LEVEL, STYLE = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
voice_mode_button = ReplyKeyboardMarkup(
    [[KeyboardButton("üó£Ô∏è Voice mode")]],
    resize_keyboard=True
)
text_mode_button = ReplyKeyboardMarkup(
    [[KeyboardButton("‚å®Ô∏è Text mode")]],
    resize_keyboard=True
)

lang_keyboard = [["–†—É—Å—Å–∫–∏–π", "ÿπÿ±ÿ®Ÿä"]]
level_keyboard = [["A1-A2", "B1-B2"]]
style_keyboard_ru = [["–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", "–î–µ–ª–æ–≤–æ–π"]]
style_keyboard_ar = [["ÿπÿßŸÖŸä", "ÿ±ÿ≥ŸÖŸä"]]

lang_markup = ReplyKeyboardMarkup(lang_keyboard, one_time_keyboard=True, resize_keyboard=True)
level_markup = ReplyKeyboardMarkup(level_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google TTS –∏–∑ base64-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def init_google_tts_client():
    encoded_key = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_BASE64")
    if not encoded_key:
        raise EnvironmentError("Environment variable GOOGLE_APPLICATION_CREDENTIALS_BASE64 is not set")
    json_key = base64.b64decode(encoded_key)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tmpfile:
        tmpfile.write(json_key)
        tmpfile_path = tmpfile.name
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = tmpfile_path
    client = texttospeech.TextToSpeechClient()
    return client, tmpfile_path

google_tts_client, tmp_key_path = init_google_tts_client()

def generate_system_prompt(language, level, style):
    # –ó–¥–µ—Å—å —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ prompt
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    return f"System prompt for {language} language, level {level}, style {style}"

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Äî –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose a language:",
        reply_markup=lang_markup
    )
    return LANG

async def lang_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_lang = update.message.text
    context.user_data["language"] = user_lang
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å / Choose a level:",
        reply_markup=level_markup
    )
    return LEVEL

async def level_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_level = update.message.text
    context.user_data["level"] = user_level
    language = context.user_data.get("language")
    if language == "–†—É—Å—Å–∫–∏–π":
        style_markup = ReplyKeyboardMarkup(style_keyboard_ru, one_time_keyboard=True, resize_keyboard=True)
    else:
        style_markup = ReplyKeyboardMarkup(style_keyboard_ar, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å / Choose a style:",
        reply_markup=style_markup
    )
    return STYLE

async def style_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_style = update.message.text
    context.user_data["style"] = user_style
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!",
        reply_markup=ReplyKeyboardRemove()
    )
    # –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å prompt –∏ —Ç.–¥. –∑–¥–µ—Å—å
    return ConversationHandler.END

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def speak_and_reply_google_tts(text: str, update: Update):
    input_text = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(language_code="ru-RU", ssml_gender=texttospeech.SsmlVoiceGender.FEMALE)
    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
    response = google_tts_client.synthesize_speech(input=input_text, voice=voice, audio_config=audio_config)
    
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as out:
        out.write(response.audio_content)
        audio_path = out.name
    
    with open(audio_path, "rb") as audio_file:
        await update.message.reply_voice(audio_file)
    
    os.remove(audio_path)

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
